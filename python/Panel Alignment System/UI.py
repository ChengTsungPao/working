# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'UI.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from imageProcessing import imageProcessing
from plot import plotResult, drawImage

import tkinter as tk
from tkinter import filedialog
from PyQt5 import QtWidgets, uic
from PyQt5.QtGui import QPixmap
from PyQt5.QtCore import Qt

import matplotlib.pylab as plt
import numpy as np
import cv2

class UI(QtWidgets.QMainWindow):

    def __init__(self):
        super(UI, self).__init__()
        uic.loadUi('UI.ui', self)

        self.image = []

        self.loadButton.clicked.connect(self.loadImage)
        self.calculateButton.clicked.connect(self.calculate)
        self.show()

    def loadImage(self):

        root = tk.Tk()
        root.withdraw()
        root.attributes('-topmost', True)
        path = filedialog.askopenfilename()
        if path != "":
            self.path = path
            self.image = cv2.imread(self.path)
            self.originImageLabel.setPixmap(QPixmap(self.path))
            self.originImageLabel.setScaledContents(True)
            self.originImageLabel.setAlignment(Qt.AlignCenter)

    def calculate(self):

        if self.image == []:
            return

        image = self.image
        light = int(self.path.split("/")[-2].split("Bri")[-1])
        imageType = self.path.split("/")[-1].split(".png")[-2][-1]

        data = imageProcessing(image, light, imageType)
        canny, drawContour, cropResizeImage = data["image"]
        Gradient, magnitude, angle, contour = data["result"]
        # drawImage(canny, "canny")
        # drawImage(threshold, "threshold")
        # drawImage(drawContour, "contour")
        # cv2.waitKey(0)
        # cv2.destroyAllWindows()

        for index in range(len(Gradient)):
            Gradient[index] += (int(index),)
        candidate = np.array(sorted(Gradient, key = lambda x: abs(abs(x[0]) - abs(x[1])))[:1])
        candidate = np.array(candidate, int)
        angle = np.array(angle)

        path = self.path.split(".png")[0] 

        Gradient = np.array(Gradient)
        plotResult("Gradient", "index of point", "Gradient", "Gx", np.abs(Gradient[:, 0]))
        plotResult("Gradient", "index of point", "Gradient", "Gy", np.abs(Gradient[:, 1]))
        plt.savefig(path + "_Gradient.png")
        plt.clf()

        plotResult("magnitude", "index of point", "magnitude", "magnitude", magnitude)
        plt.savefig(path + "_magnitude.png")
        plt.clf()

        plotResult("Angle", "index of point", "degree", "Angle", angle)
        plt.plot(candidate[:, 2], angle[candidate[:, 2]], "o", label = "candidate")
        plt.savefig(path + "_Angle.png")
        plt.clf()

        # angle_dev = angle[1:] - angle[:-1]
        # plotResult("Angle_dev", "index of point", "degree", "Angle_dev", angle_dev)
        # plt.plot(candidate[:, 2], angle_dev[candidate[:, 2]], "o", label = "candidate")
        # plt.savefig(path + "_Angle_dev.png")
        # plt.clf()

        self.resultImageLabel.setPixmap(QPixmap(path + "_Gradient.png"))
        self.resultImageLabel.setScaledContents(True)
        self.resultImageLabel.setAlignment(Qt.AlignCenter)

        self.plotMagnitudeLabel.setPixmap(QPixmap(path + "_magnitude.png"))
        self.plotMagnitudeLabel.setAlignment(Qt.AlignCenter)
        self.plotAngleLabel.setPixmap(QPixmap(path + "_Angle.png"))
        self.plotAngleLabel.setAlignment(Qt.AlignCenter)

        path = self.path.split(".png")[0] + "_result.png"
        point = contour[candidate[0][2]]

        rad = 5
        cv2.line(drawContour, (point[0] - rad , point[1] - rad), (point[0] + rad, point[1] + rad), (255, 0, 0), 2)
        cv2.line(drawContour, (point[0] - rad , point[1] + rad), (point[0] + rad, point[1] - rad), (255, 0, 0), 2)
        cv2.imwrite(path, drawContour)

        self.image = cv2.imread(path)
        self.originImageLabel.setPixmap(QPixmap(path))
        self.originImageLabel.setScaledContents(True)
        self.originImageLabel.setAlignment(Qt.AlignCenter)

    



