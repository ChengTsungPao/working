# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'UI.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1592, 1053)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.loadButton = QtWidgets.QPushButton(self.centralwidget)
        self.loadButton.setGeometry(QtCore.QRect(1390, 940, 151, 51))
        self.loadButton.setObjectName("loadButton")
        self.originImageLabel = QtWidgets.QLabel(self.centralwidget)
        self.originImageLabel.setGeometry(QtCore.QRect(30, 30, 651, 471))
        self.originImageLabel.setStyleSheet("border-color: rgb(0, 0, 0);border-width: 1.2px; border-style: inset")
        self.originImageLabel.setText("")
        self.originImageLabel.setObjectName("originImageLabel")
        self.resultImageLabel = QtWidgets.QLabel(self.centralwidget)
        self.resultImageLabel.setGeometry(QtCore.QRect(710, 30, 651, 471))
        self.resultImageLabel.setStyleSheet("border-color: rgb(0, 0, 0);border-width: 1.2px; border-style: inset")
        self.resultImageLabel.setText("")
        self.resultImageLabel.setObjectName("resultImageLabel")
        self.plotAngleLabel = QtWidgets.QLabel(self.centralwidget)
        self.plotAngleLabel.setGeometry(QtCore.QRect(710, 530, 651, 471))
        self.plotAngleLabel.setStyleSheet("border-color: rgb(0, 0, 0);border-width: 1.2px; border-style: inset")
        self.plotAngleLabel.setText("")
        self.plotAngleLabel.setObjectName("plotAngleLabel")
        self.plotMagnitudeLabel = QtWidgets.QLabel(self.centralwidget)
        self.plotMagnitudeLabel.setGeometry(QtCore.QRect(30, 530, 651, 471))
        self.plotMagnitudeLabel.setStyleSheet("border-color: rgb(0, 0, 0);border-width: 1.2px; border-style: inset")
        self.plotMagnitudeLabel.setText("")
        self.plotMagnitudeLabel.setObjectName("plotMagnitudeLabel")
        self.calculateButton = QtWidgets.QPushButton(self.centralwidget)
        self.calculateButton.setGeometry(QtCore.QRect(1390, 860, 151, 51))
        self.calculateButton.setObjectName("calculateButton")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1592, 25))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.loadButton.setText(_translate("MainWindow", "Load"))
        self.calculateButton.setText(_translate("MainWindow", "Calculate"))

    def loadImage(self):
        import tkinter as tk
        from tkinter import filedialog
        from PyQt5.QtGui import QPixmap
        from PyQt5.QtCore import Qt
        import cv2
        root = tk.Tk()
        root.withdraw()
        root.attributes('-topmost', True)
        path = filedialog.askopenfilename()
        if path != "":
            self.path = path
            self.image = cv2.imread(self.path)
            self.originImageLabel.setPixmap(QPixmap(self.path))
            self.originImageLabel.setAlignment(Qt.AlignCenter)

    def calculate(self):
        from imageProcessing import imageProcessing
        from plot import plotResult, drawImage
        from PyQt5.QtGui import QPixmap
        from PyQt5.QtCore import Qt
        import matplotlib.pylab as plt
        import cv2

        try:
            image = self.image
        except:
            return

        light = int(self.path.split("/")[-2].split("Bri")[-1])
        imageType = self.path.split("/")[-1].split(".png")[-2][-1]
        # print(light, imageType)

        data = imageProcessing(image, light, imageType)
        sobelImage, threshold, drawContour = data["image"]
        Gradient, magnitude, angle, contour = data["result"]
        # drawImage(sobelImage, "sobelfilter")
        # drawImage(threshold, "threshold")
        # drawImage(drawContour, "contour")
        # cv2.waitKey(0)
        # cv2.destroyAllWindows()

        path = self.path.split("cal_")[-2]
        plotResult("magnitude", "index of point", "degree", magnitude)
        plt.savefig(path + "magnitude.png")
        plt.clf()
        plotResult("Angle", "index of point", "degree", angle)
        plt.savefig(path + "Angle.png")
        plt.clf()

        self.plotMagnitudeLabel.setPixmap(QPixmap(path + "magnitude.png"))
        self.plotMagnitudeLabel.setAlignment(Qt.AlignCenter)
        self.plotAngleLabel.setPixmap(QPixmap(path + "Angle.png"))
        self.plotAngleLabel.setAlignment(Qt.AlignCenter)
        
if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
